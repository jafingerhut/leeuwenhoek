{:paths ["src"]
 :aliases
 {;; Common alias to use for all Clojure/Java commands
  :clj {:jvm-opts ["-XX:-OmitStackTraceInFastThrow"]}

  ;; Tested the option below with all of these JDKs:
  ;; AdoptOpenJDK 8
  ;; Amazon Corretto 8
  ;; Azul Zulu 8
  ;; AdoptOpenJDK 11
  ;; Amazon Corretto 11
  ;; Azul Zulu 11
  ;; AdoptOpenJDK 12
  :jitlog {:jvm-opts ["-XX:+PrintCompilation"]}

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; These JDKs:
  ;; AdoptOpenJDK 8
  ;; Amazon Corretto 8
  ;; Azul Zulu 8

  ;; support the options below for printing details about GC events,
  ;; but gives errors for the corresponding options below that are
  ;; supported by 11 and 12:

  ;; -XX:+PrintGC -XX:+PrintGCDetails
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; These JDKs:
  ;; AdoptOpenJDK 11
  ;; Amazon Corretto 11
  ;; Azul Zulu 11
  ;; AdoptOpenJDK 12

  ;; support the options below for printing details about GC events,
  ;; and deprecate the ones above:

  ;; -Xlog:gc
  ;; -Xlog:gc*
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
  :gclogjdk8 {:jvm-opts ["-XX:+PrintGC" "-XX:+PrintGCDetails"
                         ;; Amazon Corretto JDK does not recognize this option
                         ;;"-XX:+PrintGCTimeStamps"
                         ]}
  :gclog {:jvm-opts ["-Xlog:gc" "-Xlog:gc*"]}

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; In one run I used this option, where the contents of the
  ;; file ".hotspot_compiler" was this single line:

  ;; exclude leeuwenhoek/maybe_jit_slower$foo2 invokeStatic

  ;; In that run, the time to call function foo2 was always around
  ;; 3000 millisec, about 10x longer than most runs when I did not use
  ;; the option.

  ;; A reasonable conclusion to draw from this is that in the runs
  ;; without that option where I see foo2 elapsed time about 1/10 of
  ;; that, there is some very useful JIT compilation of function foo2
  ;; occurring that is dramatically improving its performance.
  :hotspotfile {:jvm-opts ["-XX:CompileCommandFile=.hotspot_compiler"]}
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Extra dependencies for decompiling/disassembling
  :decompile {:extra-deps {com.clojure-goes-fast/clj-java-decompiler {:mvn/version "0.3.0-SNAPSHOT"}
                           nodisassemble {:mvn/version "0.1.3"}
                           lein-nodisassemble {:mvn/version "0.1.3"}}}
  :criterium {:extra-deps {criterium {:mvn/version "0.4.5"}}}

  ;; - start a Clojure/Java Socket REPL on port 50505
  :socket {:jvm-opts ["-Dclojure.server.repl={:port,50505,:accept,clojure.core.server/repl}"]}

  ;; Common alias to use for all Clojure/Java commands that run tests
  :test {:extra-paths ["src/test/clojure" "src/test/cljc"]
             :extra-deps {org.clojure/test.check {:mvn/version "0.7.0"}}}

  ;; Run 'short' tests
  :runt {:main-opts ["-e" "(require,'[clojure.test,:as,t],'clojure.core.rrb-vector-test,'clojure.core.rrb-vector-common-test),(t/run-tests,'clojure.core.rrb-vector-common-test),(t/run-tests,'clojure.core.rrb-vector-test)"]}

  :cap {;; recommended options from README of
        ;; https://github.com/clojure-goes-fast/clj-async-profiler
        :jvm-opts ["-Djdk.attach.allowAttachSelf"
                   ;; I have trouble entering password for this from
                   ;; clj REPL.  Maybe clojure command instead of clj
                   ;; is better for this?
                   "-Djol.tryWithSudo=true"
                   "-XX:+UnlockDiagnosticVMOptions"
                   "-XX:+DebugNonSafepoints"]
        :extra-deps {com.clojure-goes-fast/clj-async-profiler
                     {:mvn/version "0.4.0"}}}

  :cljol {:extra-deps {cljol {:local/root "/Users/jafinger/clj/cljol"}
                       org.clojure/clojure {:mvn/version "1.7.0"}}}
  :eastwood {:extra-deps {jonase/eastwood {:mvn/version "0.3.5"}}
             :main-opts ["-m" "eastwood.lint"
                         "{:source-paths,[\"src\"],:test-paths,[\"test\"],:add-linters,[:unused-fn-args,:unused-locals,:unused-namespaces,:unused-private-vars],:exclude-linters,[:implicit-dependencies],:exclude-namespaces,[]}"]}

  ;; pull in specific versions of Clojure:
  :1.5    {:override-deps {org.clojure/clojure {:mvn/version "1.5.1"}}}
  :1.6    {:override-deps {org.clojure/clojure {:mvn/version "1.6.0"}}}
  :1.7    {:override-deps {org.clojure/clojure {:mvn/version "1.7.0"}}}
  :1.8    {:override-deps {org.clojure/clojure {:mvn/version "1.8.0"}}}
  :1.9    {:override-deps {org.clojure/clojure {:mvn/version "1.9.0"}}}
  :1.10.0 {:override-deps {org.clojure/clojure {:mvn/version "1.10.0"}}}
  :1.10   {:override-deps {org.clojure/clojure {:mvn/version "1.10.1"}}}
  :master {:override-deps {org.clojure/clojure {:mvn/version "1.11.0-master-SNAPSHOT"}}}}}
